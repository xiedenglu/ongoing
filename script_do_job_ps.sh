#!/bin/bash

SCRIPT_HOME=$(dirname $(readlink -f $0))
. $SCRIPT_HOME/do_job_utility.sh

# constants
GIT_CODE_DIR="cyclone"
POWERSTOREVSA_VDEPLOY_IMAGE="vtrident-deploy"
POWERSTOREVSA_CYCTEST_IMAGE="cyc_test"
POWERSTOREVSA_CYCCORE_PACKAGE="output/cyc_core/cyc_core_package/cyc_core_package.tgz"
POWERSTOREVSA_TESTBED_DIR="source/cyc_core/cyc_platform/src/package/cyc_configs"
POWERSTOREVSA_TEST_DIR="test/powerstorevsa"

pull_codes()                                                                                                                                                                              {
  # pull codes
  local build_host_ip="$1"
  local build_host_username="$2"
  local build_host_password="$3"
  local build_host_workspace="$4"

  LOG_INFO "Pulling PowerStore codes on host ${build_host_ip}, workspace: ${build_host_workspace}"

  # check if triggered by PR
  if [ ! -z ${ghprbPullLink} ]; then
    # from PR
    local pr_index=${ghprbPullLink##*/}
    local pr_protocol=${ghprbPullLink%%:*}
    local pr_host=${ghprbPullLink#*//}
    local pr_path=${pr_host#*/}
    pr_path=${pr_path%/pull*}
    pr_host=${pr_host%%/*}
    local git_creds_file=".git-credentials"

    LOG_INFO "pr_index=${pr_index}"
    LOG_INFO "pr_protocol=${pr_protocol}"
    LOG_INFO "pr_host=${pr_host}"
    LOG_INFO "pr_path=${pr_path}"

     sshpass -p ${build_host_password} ssh -o "TCPKeepAlive=yes" -o "ServerAliveInterval=30" -o "StrictHostKeyChecking=no" ${build_host_username}@${build_host_ip} "git config --global credential.helper store" 
     sshpass -p ${build_host_password} ssh -o "TCPKeepAlive=yes" -o "ServerAliveInterval=30" -o "StrictHostKeyChecking=no" ${build_host_username}@${build_host_ip} "echo -e \"protocol=${pr_protocol}\nhost=${pr_host}\npath=${pr_path}\nusername=${GIT_USERNAME}\npassword=${GIT_PASSWORD}\" | git credential-store --file ${git_creds_file} store"
     sshpass -p ${build_host_password} ssh -o "TCPKeepAlive=yes" -o "ServerAliveInterval=30" -o "StrictHostKeyChecking=no" ${build_host_username}@${build_host_ip} "sudo rm -rf ${build_host_workspace}; mkdir -p ${build_host_workspace}; cd ${build_host_workspace}; git clone ${pr_protocol}://${pr_host}/${pr_path} ${GIT_CODE_DIR}"
     local build_host_git_workspace=${build_host_workspace}/${GIT_CODE_DIR}                                                                                                                    sshpass -p ${build_host_password} ssh -o "TCPKeepAlive=yes" -o "ServerAliveInterval=30" -o "StrictHostKeyChecking=no" ${build_host_username}@${build_host_ip} "cd ${build_host_git_workspace}; git fetch --tags --progress ${pr_protocol}://${pr_host}/${pr_path} +refs/pull/*:refs/remotes/origin/pr/* +refs/heads/*:refs/remotes/origin/*"
     local pr_commit=`sshpass -p ${build_host_password} ssh -o "TCPKeepAlive=yes" -o "ServerAliveInterval=30" -o "StrictHostKeyChecking=no" ${build_host_username}@${build_host_ip} "cd ${build_host_git_workspace}; git rev-parse refs/remotes/origin/pr/${pr_index}/merge^{commit}"`                                                                                                   sshpass -p ${build_host_password} ssh -o "TCPKeepAlive=yes" -o "ServerAliveInterval=30" -o "StrictHostKeyChecking=no" ${build_host_username}@${build_host_ip} "cd ${build_host_git_workspace}; git checkout -f ${pr_commit}"                                                                                                                                                        sshpass -p ${build_host_password} ssh -o "TCPKeepAlive=yes" -o "ServerAliveInterval=30" -o "StrictHostKeyChecking=no" ${build_host_username}@${build_host_ip} "cd ${build_host_git_workspace}; git submodule init; git submodule update"                                                                                                                                                                                                                                                                                                                                      sshpass -p ${build_host_password} ssh -o "TCPKeepAlive=yes" -o "ServerAliveInterval=30" -o "StrictHostKeyChecking=no" ${build_host_username}@${build_host_ip} "sudo rm -rf ${git_creds_file}"                                                                                                                                                                                                                                                                                                                                                                               else                                                                                                                                                                                        # not from PR, get PDR codes                                                                                                                                                              sshpass -p ${build_host_password} ssh -o "TCPKeepAlive=yes" -o "ServerAliveInterval=30" -o "StrictHostKeyChecking=no" ${build_host_username}@${build_host_ip} "sudo rm -rf ${build_host_workspace}; mkdir -p ${build_host_workspace}; cd ${build_host_workspace}; git pdr clone-all -b ${PDR_BRANCH_NAME}"                                                                        fi                                                                                                                                                                                      } 
     prepare_build_env() 
     {
     local build_host_ip="$1"                                                                                                                                                                  local build_host_username="$2"                                                                                                                                                            local build_host_password="$3"                                                                                                                                                            local build_host_workspace="$4/${GIT_CODE_DIR}"                                                                                                                                                                                                                                                                                                                                     # copy testbed file                                                                                                                                                                       sshpass -p ${build_host_password} scp -o "StrictHostKeyChecking=no" ${SCRIPT_HOME}/${POWERSTOREVSA_TEST_DIR}/testbed/* ${build_host_username}@${build_host_ip}:${build_host_workspace}/${POWERSTOREVSA_TESTBED_DIR}                                                                                                                                                                                                                                                                                                                                                           # prune docker images                                                                                                                                                                     sshpass -p ${build_host_password} ssh -o "TCPKeepAlive=yes" -o "ServerAliveInterval=30" -o "StrictHostKeyChecking=no" ${build_host_username}@${build_host_ip} "docker system prune -a -f"                                                                                                                                                                                         }                                                                                                                                                                                                                                                                                                                                                                                   build()                                                                                                                                                                                   {                                                                                                                                                                                           # build                                                                                                                                                                                   local build_host_ip="$1"                                                                                                                                                                  local build_host_username="$2"                                                                                                                                                            local build_host_password="$3"                                                                                                                                                            local build_host_workspace="$4/${GIT_CODE_DIR}"                                                                                                                                                                                                                                                                                                                                     LOG_INFO "Removing previous docker images..."                                                                                                                                             sshpass -p ${build_host_password} ssh -o "StrictHostKeyChecking=no" ${build_host_username}@${build_host_ip} "docker images -a | grep -E \"vtrident-deploy|cyc_test\" | awk '{print \$3}' | xargs docker rmi"                                                                                                                                                                        LOG_INFO "Start building image on host ${build_host_ip} at workspace ${build_host_workspace}"                                                                                             sshpass -p ${build_host_password} ssh -o "TCPKeepAlive=yes" -o "ServerAliveInterval=30" -o "StrictHostKeyChecking=no" ${build_host_username}@${build_host_ip} "cd ${build_host_workspace}; make cyclone-image hciesx=no vsa=yes vsa_deploy=yes"                                                                                                                                     LOG_INFO "Start building test image on host ${build_host_ip} at workspace ${build_host_workspace}"                                                                                        sshpass -p ${build_host_password} ssh -o "TCPKeepAlive=yes" -o "ServerAliveInterval=30" -o "StrictHostKeyChecking=no" ${build_host_username}@${build_host_ip} "cd ${build_host_workspace}; make integration-testing vsa_deploy=yes"                                                                                                                                               }
     _save_docker_image()                                                                                                                                                                      {                                                                                                                                                                                           local build_host_ip="$1"                                                                                                                                                                  local build_host_username="$2"                                                                                                                                                            local build_host_password="$3"                                                                                                                                                            local build_host_workspace="$4"                                                                                                                                                           local docker_image_name="$5"                                                                                                                                                                                                                                                                                                                                                        #local image_id=`sshpass -p ${build_host_password} ssh -o "TCPKeepAlive=yes" -o "ServerAliveInterval=30" -o "StrictHostKeyChecking=no" ${build_host_username}@${build_host_ip} "docker images -a | grep ${docker_image_name}" | awk '{print $3}'`                                                                                                                                   #if [ $? -ne 0 ]; then                                                                                                                                                                    #  LOG_ERROR "Cannot get docker image id on build host for docker image: ${docker_image_name}!"                                                                                           #  return 1                                                                                                                                                                               #fi                                                                                                                                                                                       #LOG_INFO "Docker image id of docker image ${docker_image_name} in build host is $image_id"                                                                                                                                                                                                                                                                                         local image_repo_with_tag=`sshpass -p ${build_host_password} ssh -o "TCPKeepAlive=yes" -o "ServerAliveInterval=30" -o "StrictHostKeyChecking=no" ${build_host_username}@${build_host_ip} "docker images -a --format \"{{.Repository}}:{{.Tag}}\" | grep ${docker_image_name}"`                                                                                                      if [ $? -ne 0 ]; then                                                                                                                                                                       LOG_ERROR "Cannot get docker image repo:tag on build host for docker image: ${docker_image_name}!"                                                                                        return 1                                                                                                                                                                                fi                                                                                                                                                                                        LOG_INFO "Docker image repo:tag of docker image ${docker_image_name} in build host is $image_repo_with_tag"                                                                                                                                                                                                                                                                         local save_file=${build_host_workspace}/${docker_image_name}.tar                                                                                                                          LOG_INFO "About to save the docker image to file ${save_file} on build host"                                                                                                              sshpass -p ${build_host_password} ssh -o "TCPKeepAlive=yes" -o "ServerAliveInterval=30" -o "StrictHostKeyChecking=no" ${build_host_username}@${build_host_ip} "docker save -o ${save_file} ${image_repo_with_tag}"                                                                                                                                                                  if [ $? -ne 0 ]; then                                                                                                                                                                       LOG_ERROR "Cannot save docker image ${docker_image_name} on build host!"                                                                                                                  return 1                                                                                                                                                                                fi                                                                                                                                                                                      } 
     prepare_test_env()                                                                                                                                                                        {                                                                                                                                                                                           # this should be called after pull codes and build                                                                                                                                        local build_host_ip="$1"                                                                                                                                                                  local build_host_username="$2"                                                                                                                                                            local build_host_password="$3"                                                                                                                                                            local build_host_workspace="$4"                                                                                                                                                           local test_host_ip="$5"                                                                                                                                                                   local test_host_username="$6"                                                                                                                                                             local test_host_password="$7"                                                                                                                                                             local test_host_workspace="$8"                                                                                                                                                                                                                                                                                                                                                      _save_docker_image ${build_host_ip} ${build_host_username} ${build_host_password} ${build_host_workspace} ${POWERSTOREVSA_VDEPLOY_IMAGE}                                                  if [ $? -ne 0 ]; then                                                                                                                                                                       LOG_ERROR "Failed to save docker image ${POWERSTOREVSA_VDEPLOY_IMAGE}"                                                                                                                    return 1                                                                                                                                                                                fi                                                                                                                                                                                                                                                                                                                                                                                  _save_docker_image ${build_host_ip} ${build_host_username} ${build_host_password} ${build_host_workspace} ${POWERSTOREVSA_CYCTEST_IMAGE}                                                  if [ $? -ne 0 ]; then                                                                                                                                                                       LOG_ERROR "Failed to save docker image ${POWERSTOREVSA_CYCTEST_IMAGE}"                                                                                                                    return 1                                                                                                                                                                                fi                                                                                                                                                                                                                                                                                                                                                                                  # if build host ip equals test host ip, just return here                                                                                                                                  if [ "${build_host_ip}" = "${test_host_ip}" ]; then                                                                                                                                         LOG_INFO "Build host ip equals test host ip!"                                                                                                                                             if [ "${build_host_workspace}" != "${test_host_workspace}" ]; then                                                                                                                          LOG_INFO "Directly copy the files on build/test host."                                                                                                                                    sshpass -p ${build_host_password} ssh -o "TCPKeepAlive=yes" -o "ServerAliveInterval=30" -o "StrictHostKeyChecking=no" ${build_host_username}@${build_host_ip} "cp ${build_host_workspace}/${POWERSTOREVSA_VDEPLOY_IMAGE}.tar ${test_host_workspace}"                                                                                                                                sshpass -p ${build_host_password} ssh -o "TCPKeepAlive=yes" -o "ServerAliveInterval=30" -o "StrictHostKeyChecking=no" ${build_host_username}@${build_host_ip} "cp ${build_host_workspace}/${POWERSTOREVSA_CYCTEST_IMAGE}.tar ${test_host_workspace}"                                                                                                                              fi                                                                                                                                                                                        sshpass -p ${build_host_password} ssh -o "StrictHostKeyChecking=no" ${build_host_username}@${build_host_ip} "cp ${build_host_workspace}/${GIT_CODE_DIR}/${POWERSTOREVSA_CYCCORE_PACKAGE} ${test_host_workspace}"                                                                                                                                                                    sshpass -p ${build_host_password} scp -o "StrictHostKeyChecking=no" ${TESTBED_FILE} ${build_host_username}@${build_host_ip}:${test_host_workspace}                                        sshpass -p ${build_host_password} scp -o "StrictHostKeyChecking=no" -r ${SCRIPT_HOME}/test ${build_host_username}@${build_host_ip}:${test_host_workspace}                                 sshpass -p ${build_host_password} scp -o "StrictHostKeyChecking=no" -r ${SCRIPT_HOME}/qtest ${build_host_username}@${build_host_ip}:${test_host_workspace}                                return 0

       fi                                                                                                                                                                                                                                                                                                                                                                                  sshpass -p ${test_host_password} ssh -o "StrictHostKeyChecking=no" ${test_host_username}@${test_host_ip} "sudo rm -rf ${test_host_workspace}; mkdir -p ${test_host_workspace}"                                                                                                                                                                                                      # rsync copy - need to configure rsa key in src/dest hosts                                                                                                                                sshpass -p ${build_host_password} scp -o "StrictHostKeyChecking=no" ${RSYNC_SH_KEY_IN_JENKINS_CONTAINER} ${build_host_username}@${build_host_ip}:.ssh/${RSYNC_SH_KEY}                     sshpass -p ${build_host_password} ssh -o "StrictHostKeyChecking=no" ${build_host_username}@${build_host_ip} "sudo chmod 0400 .ssh/${RSYNC_SH_KEY}"                                        if [ $? -ne 0 ]; then                                                                                                                                                                       LOG_ERROR "Cannot copy or chmod the rsync key to build host!"                                                                                                                             return 1                                                                                                                                                                                fi                                                                                                                                                                                                                                                                                                                                                                                  sshpass -p ${test_host_password} scp -o "StrictHostKeyChecking=no" ${RSYNC_SH_KEY_IN_JENKINS_CONTAINER} ${test_host_username}@${test_host_ip}:.ssh/${RSYNC_SH_KEY}                        sshpass -p ${test_host_password} ssh -o "StrictHostKeyChecking=no" ${test_host_username}@${test_host_ip} "sudo chmod 0400 .ssh/${RSYNC_SH_KEY}"                                           if [ $? -ne 0 ]; then                                                                                                                                                                       LOG_ERROR "Cannot copy or chmod the rsync key to test host!"                                                                                                                              return 1                                                                                                                                                                                fi                                                                                                                                                                                        sshpass -p ${test_host_password} ssh-copy-id -i ${RSYNC_SH_KEY_IN_JENKINS_CONTAINER} ${test_host_username}@${test_host_ip}                                                                if [ $? -ne 0 ]; then                                                                                                                                                                       LOG_ERROR "Failed to copy ssh key to test host!"                                                                                                                                          return 1                                                                                                                                                                                fi                                                                                                                                                                                                                                                                                                                                                                                  # deploy image                                                                                                                                                                            local deploy_file=${build_host_workspace}/${POWERSTOREVSA_VDEPLOY_IMAGE}.tar                                                                                                              sshpass -p ${build_host_password} ssh -o "StrictHostKeyChecking=no" ${build_host_username}@${build_host_ip} "rsync -avzhP -e \"ssh -A -i .ssh/id_rsa_rsync xiaowei@10.124.127.22 ssh -o StrictHostKeyChecking=no -i .ssh/id_rsa_rsync\" ${deploy_file} ${test_host_username}@${test_host_ip}:${test_host_workspace}"                                                                if [ $? -ne 0 ]; then                                                                                                                                                                       LOG_ERROR "Failed to copy deploy image from build host to test host!"                                                                                                                     return 1                                                                                                                                                                                fi                                                                                                                                                                                                                                                                                                                                                                                  # cyctest image                                                                                                                                                                           local cyctest_file=${build_host_workspace}/${POWERSTOREVSA_CYCTEST_IMAGE}.tar                                                                                                             sshpass -p ${build_host_password} ssh -o "StrictHostKeyChecking=no" ${build_host_username}@${build_host_ip} "rsync -avzhP -e \"ssh -A -i .ssh/id_rsa_rsync xiaowei@10.124.127.22 ssh -o StrictHostKeyChecking=no -i .ssh/id_rsa_rsync\" ${cyctest_file} ${test_host_username}@${test_host_ip}:${test_host_workspace}"                                                               if [ $? -ne 0 ]; then                                                                                                                                                                       LOG_ERROR "Failed to copy cyctest image from build host to test host!"                                                                                                                    return 1
         fi                                                                                                                                                                                                                                                                                                                                                                                  # cyccore package                                                                                                                                                                         local cyccore_package_file=${build_host_workspace}/${GIT_CODE_DIR}/${POWERSTOREVSA_CYCCORE_PACKAGE}                                                                                       sshpass -p ${build_host_password} ssh -o "StrictHostKeyChecking=no" ${build_host_username}@${build_host_ip} "rsync -avzhP -e \"ssh -A -i .ssh/id_rsa_rsync xiaowei@10.124.127.22 ssh -o StrictHostKeyChecking=no -i .ssh/id_rsa_rsync\" ${cyccore_package_file} ${test_host_username}@${test_host_ip}:${test_host_workspace}"                                                       if [ $? -ne 0 ]; then                                                                                                                                                                       LOG_ERROR "Failed to copy cyccore package file from build host to test host!"                                                                                                             return 1                                                                                                                                                                                fi                                                                                                                                                                                                                                                                                                                                                                                  # testbed file - on localhost                                                                                                                                                             local testbed_file=${TESTBED_FILE}                                                                                                                                                        sshpass -p ${test_host_password} scp -o "StrictHostKeyChecking=no" ${testbed_file} ${test_host_username}@${test_host_ip}:${test_host_workspace}                                           if [ $? -ne 0 ]; then                                                                                                                                                                       LOG_ERROR "Failed to copy testbed file to test host!"                                                                                                                                     return 1                                                                                                                                                                                fi                                                                                                                                                                                                                                                                                                                                                                                  # test folder                                                                                                                                                                             sshpass -p ${test_host_password} scp -o "StrictHostKeyChecking=no" -r ${SCRIPT_HOME}/test ${test_host_username}@${test_host_ip}:${test_host_workspace}                                    if [ $? -ne 0 ]; then                                                                                                                                                                       LOG_ERROR "Failed to copy test folder to test host!"                                                                                                                                      return 1                                                                                                                                                                                fi                                                                                                                                                                                                                                                                                                                                                                                  # qtest folder                                                                                                                                                                            sshpass -p ${test_host_password} scp -o "StrictHostKeyChecking=no" -r ${SCRIPT_HOME}/qtest ${test_host_username}@${test_host_ip}:${test_host_workspace}                                   if [ $? -ne 0 ]; then                                                                                                                                                                       LOG_ERROR "Failed to copy qtest folder to test host!"                                                                                                                                     return 1                                                                                                                                                                                fi                                                                                                                                                                                                                                                                                                                                                                                #  below is dierect copy                                                                                                                                                                  #  sshpass -p ${build_host_password} ssh -o "StrictHostKeyChecking=no" ${build_host_username}@${build_host_ip} "sshpass -p ${test_host_password} scp -o \"StrictHostKeyChecking=no\" ${deploy_file} ${test_host_username}@${test_host_ip}:${test_host_workspace}"                                                                                                                   }                                                                                                                                                                                                                                                                                                                                                                                   run_test()
         {                                                                                                                                                                                           local test_host_ip="$1"                                                                                                                                                                   local test_host_username="$2"                                                                                                                                                             local test_host_password="$3"                                                                                                                                                             local test_host_workspace="$4"                                                                                                                                                                                                                                                                                                                                                      local cyc_test_pkg=../../${POWERSTOREVSA_CYCTEST_IMAGE}.tar                                                                                                                               local img_pkg=../../${POWERSTOREVSA_VDEPLOY_IMAGE}.tar                                                                                                                                    local testbed_file=../../${TESTBED_FILE}                                                                                                                                                  local cyc_core_pkg=../../`basename ${POWERSTOREVSA_CYCCORE_PACKAGE}`                                                                                                                      local testset_name=${TESTSET_NAME}                                                                                                                                                                                                                                                                                                                                                  # run tests                                                                                                                                                                               sshpass -p ${test_host_password} ssh -o "TCPKeepAlive=yes" -o "ServerAliveInterval=30" -o "StrictHostKeyChecking=no" ${test_host_username}@${test_host_ip} "cd ${test_host_workspace}/${POWERSTOREVSA_TEST_DIR}; ./runtestcases.sh -cyctestpkg ${cyc_test_pkg} -imgpkg ${img_pkg} -testbed ${testbed_file} -cyccorepkg ${cyc_core_pkg} -testset ${testset_name}"                    if [ $? -ne 0 ]; then                                                                                                                                                                       LOG_ERROR "Failed to run test!"                                                                                                                                                           return 1                                                                                                                                                                                fi                                                                                                                                                                                      } 
         fetch_results()                                                                                                                                                                           {                                                                                                                                                                                           local test_host_ip="$1"                                                                                                                                                                   local test_host_username="$2"                                                                                                                                                             local test_host_password="$3"                                                                                                                                                             local test_host_result_folder="$4"                                                                                                                                                                                                                                                                                                                                                  local result_folder=`basename ${test_host_result_folder}`                                                                                                                                 local test_host_result_folder_tar=${result_folder}.tar.gz                                                                                                                                                                                                                                                                                                                           rm -rf ${result_folder}                                                                                                                                                                   rm -rf ${test_host_result_folder_tar}                                                                                                                                                                                                                                                                                                                                               # fetch results folder                                                                                                                                                                    LOG_INFO "Fetching results folder from test host ${test_host_ip}:${test_host_result_folder}"                                                                                              sshpass -p ${test_host_password} ssh -o "TCPKeepAlive=yes" -o "ServerAliveInterval=30" -o "StrictHostKeyChecking=no" ${test_host_username}@${test_host_ip} "cd ${test_host_result_folder}/..; tar --exclude=\"*_service-data.tgz\" -zcf ${test_host_result_folder_tar} ${result_folder}"                                                                                                                                                                                                                                                                                      sshpass -p ${test_host_password} scp -o "TCPKeepAlive=yes" -o "ServerAliveInterval=30" -o "StrictHostKeyChecking=no" ${test_host_username}@${test_host_ip}:${test_host_result_folder}/../${test_host_result_folder_tar} .                                                                                                                                                           tar -xf ${test_host_result_folder_tar}                                                                                                                                                  #  sshpass -p ${test_host_password} ssh -o "StrictHostKeyChecking=no" ${test_host_username}@${test_host_ip} "rsync -avzhP -e \"ssh -A -i .ssh/id_rsa_rsync xiaowei@10.124.127.22 ssh -o StrictHostKeyChecking=no -i .ssh/id_rsa_rsync\" ${test_host_result_folder}/../${test_host_result_folder_tar} ."                                                                               if [ $? -ne 0 ]; then                                                                                                                                                                       LOG_INFO "Failed to fetching results folder!"                                                                                                                                             return 1                                                                                                                                                                                fi                                                                                                                                                                                      } 
         sync_result()                                                                                                                                                                             {                                                                                                                                                                                           local test_host_ip="$1"                                                                                                                                                                   local test_host_username="$2"                                                                                                                                                             local test_host_password="$3"                                                                                                                                                             local test_host_result_folder="$4"                                                                                                                                                        local test_host_qtest_folder="$5"                                                                                                                                                                                                                                                                                                                                                   if [ -z "${QTEST_TOKEN_FOR_JOB}" ]; then                                                                                                                                                    LOG_WARNING "No QTEST_TOKEN_FOR_JOB is specified, skip syncing results to qtest!"                                                                                                         return 1                                                                                                                                                                                else                                                                                                                                                                                        LOG_INFO "Syncing results to qtest, folder from test host ${test_host_ip}"                                                                                                              fi                                                                                                                                                                                                                                                                                                                                                                                  local test_qtest_test_type="smoke"                                                                                                                                                        if [ "${TESTSET_NAME}" = "vsa_nightly_regression" ]; then                                                                                                                                   test_qtest_test_type="nreg"                                                                                                                                                             fi                                                                                                                                                                                                                                                                                                                                                                                  LOG_INFO "test_host_qtest_folder: ${test_host_qtest_folder}"                                                                                                                              LOG_INFO "test_qtest_test_type: ${test_qtest_test_type}"                                                                                                                                  LOG_INFO "test_host_result_folder: ${test_host_result_folder}"                                                                                                                            LOG_INFO "QTEST_TOKEN_FOR_JOB: ${QTEST_TOKEN_FOR_JOB}"                                                                                                                                    sshpass -p ${test_host_password} ssh -o "TCPKeepAlive=yes" -o "ServerAliveInterval=30" -o "StrictHostKeyChecking=no" ${test_host_username}@${test_host_ip} "cd ${test_host_qtest_folder}; python3 update_qtest.py -t ${test_qtest_test_type} -p ${test_host_result_folder} -k \"${QTEST_TOKEN_FOR_JOB}\""                                                                           if [ $? -ne 0 ]; then                                                                                                                                                                       LOG_ERROR "Failed to sync results to qtest!"                                                                                                                                              return 1                                                                                                                                                                                fi                                                                                                                                                                                      }

         trap_handler()                                                                                                                                                                            {                                                                                                                                                                                           LOG_INFO "Release testbed and host in trap_handler..."                                                                                                                                    release_testbed ${TEST_GREENBED_ID}                                                                                                                                                       release_host ${BUILD_HOST_IP}                                                                                                                                                             release_host ${TEST_HOST_IP}                                                                                                                                                            }                                                                                                                                                                                                                                                                                                                                                                                   # main                                                                                                                                                                                    if [ -z "${GREENBED_ADDRESS}" ]; then                                                                                                                                                       LOG_ERROR "No GREENBED_ADDRESS is specified!"                                                                                                                                             exit 1                                                                                                                                                                                  fi                                                                                                                                                                                                                                                                                                                                                                                  if [ -z "${BUILD_HOST_TAG}" ]; then                                                                                                                                                         LOG_ERROR "No BUILD_HOST_TAG is specified!"                                                                                                                                               exit 1                                                                                                                                                                                  fi                                                                                                                                                                                                                                                                                                                                                                                  if [ -z "${TEST_HOST_TAG}" ]; then                                                                                                                                                          LOG_ERROR "No TEST_HOST_TAG is specified！"                                                                                                                                               exit 1                                                                                                                                                                                  fi                                                                                                                                                                                                                                                                                                                                                                                  if [ -z "${TESTBED_POOL}" ]; then                                                                                                                                                           LOG_ERROR "No TESTBED_POOL is specified!"                                                                                                                                                 exit 1                                                                                                                                                                                  fi                                                                                                                                                                                                                                                                                                                                                                                  if [ -z "${ghprbPullLink}" ]; then                                                                                                                                                          if [ -z "${PDR_BRANCH_NAME}" ]; then                                                                                                                                                        LOG_ERROR "Not triggered by PR and no PDR_BRANCH_NAME is specified!"                                                                                                                      exit 1                                                                                                                                                                                  fi                                                                                                                                                                                      else                                                                                                                                                                                        if [ -z "${GIT_USERNAME}" ] || [ -z "${GIT_PASSWORD}" ]; then                                                                                                                               LOG_ERROR "Triggered by PR, but no git credentials configured!"                                                                                                                           exit 1                                                                                                                                                                                  fi                                                                                                                                                                                        LOG_INFO "Triggered by PR: ${ghprbPullLink}"

         fi                                                                                                                                                                                                                                                                                                                                                                                  if [ -z "${BUILD_HOST_WORKSPACE}" ]; then                                                                                                                                                   BUILD_HOST_WORKSPACE="jenkins/workspace/${JOB_NAME}"                                                                                                                                    fi                                                                                                                                                                                                                                                                                                                                                                                  if [ -z "${TEST_HOST_WORKSPACE}" ]; then                                                                                                                                                    TEST_HOST_WORKSPACE="jenkins/workspace/${JOB_NAME}"                                                                                                                                     fi                                                                                                                                                                                                                                                                                                                                                                                  if [ -z "${SCRIPT_HOME}" ]; then                                                                                                                                                            SCRIPT_HOME="${JENKINS_TOOLS_DIR}"                                                                                                                                                      fi                                                                                                                                                                                                                                                                                                                                                                                  if [ -z "${TESTSET_NAME}" ]; then                                                                                                                                                           LOG_ERROR "No TESTSET_NAME is specified!"                                                                                                                                                 exit 1                                                                                                                                                                                  else                                                                                                                                                                                        LOG_INFO "TESTSET_NAME is ${TESTSET_NAME}"                                                                                                                                              fi                                                                                                                                                                                                                                                                                                                                                                                  if [ -z "${QTEST_TOKEN_FOR_JOB}" ]; then                                                                                                                                                    LOG_ERROR "No QTEST_TOKEN_FOR_JOB is specified!, will skip sync test result"                                                                                                            else                                                                                                                                                                                        LOG_INFO "QTEST_TOKEN_FOR_JOB is specified!"                                                                                                                                            figet_host ${BUILD_HOST_TAG}                                                                                                                                                                BUILD_HOST_IP=$HOST_IP                                                                                                                                                                    BUILD_HOST_USERNAME=$HOST_USERNAME                                                                                                                                                        BUILD_HOST_PASSWORD=$HOST_PASSWORD                                                                                                                                                        if [ ! -z "${BUILD_HOST_IP}" ] && [ "${BUILD_HOST_IP}" != "null" ]; then                                                                                                                    LOG_INFO "Retrieved build host ip: ${BUILD_HOST_IP}"                                                                                                                                    else                                                                                                                                                                                        LOG_ERROR "Cannot get build host from greenbed!"                                                                                                                                          release_host ${BUILD_HOST_IP}                                                                                                                                                             exit 1

         fi                                                                                                                                                                                        if [ -z "${BUILD_HOST_USERNAME}" ] || [ "${BUILD_HOST_USERNAME}" = "null" ] \                                                                                                                 || [ -z "${BUILD_HOST_PASSWORD}" ] || [ "${BUILD_HOST_PASSWORD}" = "null" ]; then                                                                                                       LOG_ERROR "Cannot get build host credentials from greenbed!"                                                                                                                              release_host ${BUILD_HOST_IP}                                                                                                                                                             exit 1                                                                                                                                                                                  fi                                                                                                                                                                                                                                                                                                                                                                                  HOST_IP=""                                                                                                                                                                                HOST_USERNAME=""                                                                                                                                                                          HOST_PASSWORD=""                                                                                                                                                                          get_host ${TEST_HOST_TAG}                                                                                                                                                                 TEST_HOST_IP=$HOST_IP                                                                                                                                                                     TEST_HOST_USERNAME=$HOST_USERNAME                                                                                                                                                         TEST_HOST_PASSWORD=$HOST_PASSWORD                                                                                                                                                         if [ ! -z "${TEST_HOST_IP}" ] && [ "${TEST_HOST_IP}" != "null" ]; then                                                                                                                      LOG_INFO "Retrieved test host ip: ${TEST_HOST_IP}"                                                                                                                                      else                                                                                                                                                                                        LOG_ERROR "Cannot get test host from greenbed!"                                                                                                                                           release_host ${BUILD_HOST_IP}                                                                                                                                                             release_host ${TEST_HOST_IP}                                                                                                                                                              exit 1                                                                                                                                                                                  fi                                                                                                                                                                                        if [ -z "${TEST_HOST_USERNAME}" ] || [ "${TEST_HOST_USERNAME}" = "null" ] \                                                                                                                   || [ -z "${TEST_HOST_PASSWORD}" ] || [ "${TEST_HOST_PASSWORD}" = "null" ]; then                                                                                                         LOG_ERROR "Cannot get test host credentials from greenbed!"                                                                                                                               release_host ${BUILD_HOST_IP}                                                                                                                                                             release_host ${TEST_HOST_IP}                                                                                                                                                              exit 1                                                                                                                                                                                  fi                                                                                                                                                                                                                                                                                                                                                                                  # powerstore needs .json ext for testbed file                                                                                                                                             TESTBED_FILE="testbed.json"                                                                                                                                                               get_testbed                                                                                                                                                                               TEST_GREENBED_ID=`cat ${TESTBED_FILE} | jq -r '.greenbed_id'`                                                                                                                             if [ ! -z "${TEST_GREENBED_ID}" ] && [ "${TEST_GREENBED_ID}" != "null" ]; then                                                                                                              LOG_INFO "Retrieved testbed greenbed id: ${TEST_GREENBED_ID}"                                                                                                                           else                                                                                                                                                                                        LOG_ERROR "Cannot get testbed from greenbed!"                                                                                                                                             release_host $BUILD_HOST_IP

           release_host ${TEST_HOST_IP}                                                                                                                                                              exit 1                                                                                                                                                                                  fi                                                                                                                                                                                                                                                                                                                                                                                  trap 'trap_handler' TERM                                                                                                                                                                                                                                                                                                                                                            call_function "Pulling Codes" pull_codes ${BUILD_HOST_IP} ${BUILD_HOST_USERNAME} ${BUILD_HOST_PASSWORD} ${BUILD_HOST_WORKSPACE}                                                           if [ $? -ne 0 ]; then                                                                                                                                                                       LOG_ERROR "Failed to pull codes!"                                                                                                                                                         release_testbed ${TEST_GREENBED_ID}                                                                                                                                                       release_host ${BUILD_HOST_IP}                                                                                                                                                             release_host ${TEST_HOST_IP}                                                                                                                                                              exit 1                                                                                                                                                                                  fi                                                                                                                                                                                                                                                                                                                                                                                  call_function "Prepareing Build Host ENV" prepare_build_env ${BUILD_HOST_IP} ${BUILD_HOST_USERNAME} ${BUILD_HOST_PASSWORD} ${BUILD_HOST_WORKSPACE}                                        if [ $? -ne 0 ]; then                                                                                                                                                                       LOG_ERROR "Failed to prepare build host!"                                                                                                                                                 release_testbed ${TEST_GREENBED_ID}                                                                                                                                                       release_host ${BUILD_HOST_IP}                                                                                                                                                             release_host ${TEST_HOST_IP}                                                                                                                                                              exit 1                                                                                                                                                                                  fi                                                                                                                                                                                                                                                                                                                                                                                  call_function "Building" build ${BUILD_HOST_IP} ${BUILD_HOST_USERNAME} ${BUILD_HOST_PASSWORD} ${BUILD_HOST_WORKSPACE}                                                                     if [ $? -ne 0 ]; then                                                                                                                                                                       LOG_ERROR "Failed to build images!"                                                                                                                                                       release_testbed ${TEST_GREENBED_ID}                                                                                                                                                       release_host ${BUILD_HOST_IP}                                                                                                                                                             release_host ${TEST_HOST_IP}                                                                                                                                                              exit 1                                                                                                                                                                                  fi                                                                                                                                                                                                                                                                                                                                                                                  call_function "Preparing Test Host ENV" prepare_test_env ${BUILD_HOST_IP} ${BUILD_HOST_USERNAME} ${BUILD_HOST_PASSWORD} ${BUILD_HOST_WORKSPACE} ${TEST_HOST_IP} ${TEST_HOST_USERNAME} ${TEST_HOST_PASSWORD} ${TEST_HOST_WORKSPACE}                                                                                                                                                  if [ $? -ne 0 ]; then                                                                                                                                                                       LOG_ERROR "Failed to prepare test host!"                                                                                                                                                  release_testbed ${TEST_GREENBED_ID}                                                                                                                                                       release_host ${BUILD_HOST_IP}                                                                                                                                                             release_host ${TEST_HOST_IP}
             exit 1                                                                                                                                                                                  ficall_function "Running Tests" run_test ${TEST_HOST_IP} ${TEST_HOST_USERNAME} ${TEST_HOST_PASSWORD} ${TEST_HOST_WORKSPACE}                                                                 RET=$?                                                                                                                                                                                                                                                                                                                                                                              TEST_RESULT_FOLDER=${TEST_HOST_WORKSPACE}/${POWERSTOREVSA_TEST_DIR}/results                                                                                                               call_function "Fetching Results" fetch_results ${TEST_HOST_IP} ${TEST_HOST_USERNAME} ${TEST_HOST_PASSWORD} ${TEST_RESULT_FOLDER}                                                                                                                                                                                                                                                    TEST_RESULT_FOLDER="../${POWERSTOREVSA_TEST_DIR}/results"                                                                                                                                 QTEST_FOLDER=${TEST_HOST_WORKSPACE}/qtest                                                                                                                                                 call_function "Syncing Test Result" sync_result ${TEST_HOST_IP} ${TEST_HOST_USERNAME} ${TEST_HOST_PASSWORD} ${TEST_RESULT_FOLDER} ${QTEST_FOLDER}                                                                                                                                                                                                                                   release_testbed ${TEST_GREENBED_ID}                                                                                                                                                       release_host ${BUILD_HOST_IP}                                                                                                                                                             release_host ${TEST_HOST_IP}                                                                                                                                                                                                                                                                                                                                                        exit $RET 
